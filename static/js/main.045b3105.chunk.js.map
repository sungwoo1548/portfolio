{"version":3,"sources":["serviceWorker.js","index.js","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","PageState","setPageState","url","ProjectState","setProjectState","Pages","TIL","subject","title","gitAdress","date","comments","className","src","alt","href","onClick","exercise","map","el","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBCDD,WAAiB,IAAD,EAEKC,qBAFL,mBAEtBC,EAFsB,KAEXC,EAFW,OAGWF,mBAAS,CAAEG,IAAK,KAH3B,mBAGtBC,EAHsB,KAGRC,EAHQ,KAKvBC,EAAQ,CACZC,IAAK,CACH,CACEC,QAAS,WACTC,MAAO,yBACPC,UAAW,2DACXC,KAAM,aACNC,SAAU,wOAEVT,IAAK,0DAEP,CACEK,QAAS,QACTC,MAAO,yBACPC,UAAW,iEACXC,KAAM,aACNC,SAAU,2hBAGVT,IAAK,gEAEP,CACEK,QAAS,aACTC,MAAO,8BACPC,UAAW,4DACXC,KAAM,aACNC,SAAU,6yBAKVT,IAAK,6DAkCX,OACE,6BACE,mBA/Be,kBACjB,yBAAKU,UAAU,cACb,6CACA,yBAAKA,UAAU,SAASC,IAAI,yBAAyBC,IAAI,WACzD,0BAAMF,UAAU,WAAWG,KAAK,IAAIC,QAAS,WAAQf,EAAaI,EAAMC,IAAIW,YAA5E,SACA,0BAAML,UAAU,WAAWG,KAAK,IAAIC,QAAS,WAAQf,EAAaI,EAAMC,OAAxE,oBA0BA,MACA,yBAAKM,UAAU,QACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,kBACb,mBA1BK,SAAC,GAAmB,IAAjBZ,EAAgB,EAAhBA,UAEhB,OAAIA,EAEKA,EAAUkB,KAAI,SAACC,GAAS,OAAO,uBAAGP,UAAU,eAAeI,QAAS,WAAQZ,EAAgBe,KAAQA,EAAGZ,YAEpG,uBAAGK,UAAU,gBAAb,qCAA+C,6BAA/C,mFAoBJ,CAAQZ,UAAWA,KAErB,yBAAKY,UAAU,oBACb,mBApBS,SAAC,GAAsB,IAApBT,EAAmB,EAAnBA,aACpB,OACE,6BACE,6CAASA,EAAaK,MAAtB,KACA,6CAASL,EAAaO,MACtB,6CAASP,EAAaQ,UACtB,uBAAGI,KAAMZ,EAAaM,WAAtB,6CAcI,CAAYN,aAAcA,KAG5B,kBAAC,IAAD,CAAQD,IAAKC,EAAaD,IACxBU,UAAU,sBDlFN,MAAUQ,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.045b3105.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './stylesheets/index.css';\r\nimport './stylesheets/main.css';\r\nimport Main from './components/Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState } from 'react';\r\nimport Iframe from 'react-iframe';\r\n\r\n\r\n\r\n\r\nexport default function Main() {\r\n\r\n  const [PageState, setPageState] = useState();\r\n  const [ProjectState, setProjectState] = useState({ url: '' });\r\n\r\n  const Pages = {\r\n    TIL: [\r\n      {\r\n        subject: \"exercise\",\r\n        title: \"vanillaJs 연습\",\r\n        gitAdress: \"https://github.com/sungwoo1548/TIL/tree/master/VanillaJS\",\r\n        date: \"2019/10/21\",\r\n        comments: \"이 프로젝트는 prompt로 사용자 이름을 입력받아 나타내고,\"\r\n          + \" 순수 javascript로 구현된 counter 기능이 있음.\",\r\n        url: \"https://sungwoo1548.github.io/TIL/VanillaJS/index.html\",\r\n      },\r\n      {\r\n        subject: \"giphy\",\r\n        title: \"giphy API 연습\",\r\n        gitAdress: \"https://github.com/sungwoo1548/TIL/tree/master/VanillaJS/Giphy\",\r\n        date: \"2019/10/21\",\r\n        comments: \"이 프로젝트는 Giphy라는 움직이는 그림 gif 검색사이트의 API를 이용함.\\n\"\r\n          + \"1. 검색 입력창 윗 부분에는 3초에 한번씩 랜덤한 그림이 표시됨\"\r\n          + \"2. 입력창에 입력 후 검색 버튼 클릭 또는 엔터를 누르면 키워드에 맞는 결과가 조회됨.\",\r\n        url: \"https://sungwoo1548.github.io/TIL/VanillaJS/Giphy/index.html\",\r\n      },\r\n      {\r\n        subject: \"soundcloud\",\r\n        title: \"soundcloud API 연습\",\r\n        gitAdress: \"https://github.com/sungwoo1548/TIL/tree/master/SoundCloud\",\r\n        date: \"2019/10/21\",\r\n        comments: \"이 프로젝트는 SoundCloud라는 재생가능한 음원 검색 사이트의 API를 이용함.\"\r\n          + \"1. 검색 임력창에 키워드 입력 후 엔터 또는 검색버튼 클릭\"\r\n          + \"2. 검색 결과에서 맘에 드는 곡 카드에서 +Add to playlist 를 클릭\"\r\n          + \"3. 좌측에 음원 재생 카드가 생기고, 계속 추가됨\"\r\n          + \"4. 좌측에 추가된 재생리스트는 local storage에 쌓이며, reset버튼 누르기 전까지 브라우저에 저장되어있음.\",\r\n        url: \"https://sungwoo1548.github.io/TIL/SoundCloud/index.html\",\r\n      }\r\n    ],\r\n  }\r\n\r\n  const Navigation = () => (\r\n    <nav className=\"navigation\">\r\n      <span>KickTheBook</span>\r\n      <img className=\"avatar\" src=\"assets/images/user.png\" alt=\"avatar\" />\r\n      <span className=\"nav-item\" href=\"#\" onClick={() => { setPageState(Pages.TIL.exercise) }} >Intro</span>\r\n      <span className=\"nav-item\" href=\"#\" onClick={() => { setPageState(Pages.TIL) }} >Today I Learn</span>\r\n      {/* <span className=\"nav-item\" href=\"#\" onClick={() => { setPageState(Pages.TIL.soundcloud) }} >SoundCloud</span> */}\r\n    </nav>\r\n  );\r\n  const Header = ({ PageState }) => {\r\n    // console.log(PageState);\r\n    if (PageState) {\r\n      // setProjectState(PageState[0]); // Page의 첫번 째 내용 set\r\n      return PageState.map((el) => { return <a className=\"top-nav-item\" onClick={() => { setProjectState(el) }}>{el.subject}</a> });\r\n    }\r\n    else return <a className=\"top-nav-item\">Portfolio Site 입니다.<br /> 좌측의 메뉴를 클릭해 주세요.</a>;\r\n  }\r\n\r\n  const PjContents = ({ ProjectState }) => {\r\n    return (\r\n      <div>\r\n        <p>제목 : {ProjectState.title} </p>\r\n        <p>날짜 : {ProjectState.date}</p>\r\n        <p>설명 : {ProjectState.comments}</p>\r\n        <a href={ProjectState.gitAdress}>github 보러가기 →</a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <div className=\"main\">\r\n        <div className=\"contents\">\r\n          <div className=\"top-navigation\">\r\n            <Header PageState={PageState} />\r\n          </div>\r\n          <div className=\"project-contents\">\r\n            <PjContents ProjectState={ProjectState} />\r\n          </div>\r\n\r\n          <Iframe url={ProjectState.url}\r\n            className=\"iframe-style\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n{/* <div className=\"dropdown\">\r\n  <button className=\"dropbtn\">DropDown</button>\r\n  <div className=\"dropdown-content\">\r\n  </div>\r\n</div> */}"],"sourceRoot":""}