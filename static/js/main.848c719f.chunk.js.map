{"version":3,"sources":["serviceWorker.js","index.js","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","url","PageState","setPageState","Projects","exercise","title","giphy","soundcloud","className","src","alt","onClick","id","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,mBCJD,WAAiB,IAAD,EAEKC,mBAAS,CAAEC,IAAK,6CAFrB,mBAEtBC,EAFsB,KAEXC,EAFW,KAGvBC,EACC,CACHC,SAAU,CACRC,MAAO,yBACPL,IAAK,0DAEPM,MAAO,CACLD,MAAO,yBACPL,IAAK,gEAEPO,WAAY,CACVF,MAAO,8BACPL,IAAK,4DAeX,OACE,6BACE,mBAZe,kBACjB,yBAAKQ,UAAU,cACb,yBAAKA,UAAU,SAASC,IAAI,yBAAyBC,IAAI,WACzD,0BAAMF,UAAU,WAAWG,QAAS,WAAQT,EAAaC,EAAaC,YAAtE,SACA,0BAAMI,UAAU,WAAWG,QAAS,WAAQT,EAAaC,EAAaG,SAAtE,OACA,0BAAME,UAAU,WAAWG,QAAS,WAAQT,EAAaC,EAAaI,cAAtE,iBAOA,MACA,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,UAAf,MACA,kBAAC,IAAD,CAAQR,IAAKC,EAAUD,IACrBQ,UAAU,eACVI,GAAG,cDlCC,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.848c719f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './stylesheets/index.css';\r\nimport './stylesheets/main.css';\r\nimport Main from './components/Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState } from 'react';\r\nimport Iframe from 'react-iframe';\r\n\r\nexport default function Main() {\r\n\r\n  const [PageState, setPageState] = useState({ url: 'http://www.youtube.com/embed/xDMP3i36naA' });\r\n  const Projects = {\r\n    TIL: {\r\n      exercise: {\r\n        title: \"vanillaJs 연습\",\r\n        url: \"https://sungwoo1548.github.io/TIL/VanillaJS/index.html\",\r\n      },\r\n      giphy: {\r\n        title: \"giphy API 연습\",\r\n        url: \"https://sungwoo1548.github.io/TIL/VanillaJS/Giphy/index.html\",\r\n      },\r\n      soundcloud: {\r\n        title: \"soundcloud API 연습\",\r\n        url: \"https://sungwoo1548.github.io/TIL/SoundCloud/index.html\",\r\n      },\r\n    }\r\n  }\r\n\r\n  const Navigation = () => (\r\n    <nav className=\"navigation\">\r\n      <img className=\"avatar\" src=\"assets/images/user.png\" alt=\"avatar\" />\r\n      <text className=\"nav-item\" onClick={() => { setPageState(Projects.TIL.exercise) }} >Intro</text>\r\n      <text className=\"nav-item\" onClick={() => { setPageState(Projects.TIL.giphy) }} >TIL</text>\r\n      <text className=\"nav-item\" onClick={() => { setPageState(Projects.TIL.soundcloud) }} >SoundCloud</text>\r\n    </nav>\r\n  );\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <div className=\"main\">\r\n        <div className=\"column-start\">\r\n          <div className=\"Header\">tt</div>\r\n          <Iframe url={PageState.url}\r\n            className=\"iframe-style\"\r\n            id=\"myId\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}