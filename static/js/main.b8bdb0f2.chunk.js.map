{"version":3,"sources":["components/Main.js","serviceWorker.js","index.js"],"names":["NavLink","className","href","this","props","itemName","React","Component","Navigation","src","alt","Intro","id","Project","name","time","summary","epilogue","resultsURL","map","url","projects","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAEMA,E,iLAEA,OACE,uBAAGC,UAAU,WAAWC,KAAI,WAAMC,KAAKC,MAAMC,WAC1CF,KAAKC,MAAMC,c,GAJAC,IAAMC,WASpBC,EAAa,kBACjB,yBAAKP,UAAU,cACb,yBAAKA,UAAU,SAASQ,IAAI,yBAAyBC,IAAI,WACzD,kBAAC,EAAD,CAASL,SAAS,UAClB,kBAAC,EAAD,CAASA,SAAS,8BAClB,kBAAC,EAAD,CAASA,SAAS,gCAGhBM,EAAQ,kBACZ,yBAAKV,UAAU,UAAUW,GAAG,SAC1B,uFACA,6BACE,uBAAGV,KAAK,4BAAR,qBACA,kFAEF,6BACE,4CACA,sCACA,wDACA,mDAKAW,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,WAAlC,OACd,yBAAKjB,UAAU,UAAUW,GAAIE,GAC3B,4BAAKA,GACL,2BAAIC,GACJ,6BACE,4CACA,2BAAIC,GACJ,4CACA,2BAAIC,GACJ,4CACA,6BACGC,EAAWC,KAAI,SAAAC,GAAG,OACjB,yBAAKX,IAAKW,EAAKV,IAAI,0BAMvBW,EAAW,CACf,CACEP,KAAM,4BACNC,KAAM,kBACNC,QAAS,8GACTC,SAAU,2HACVC,WAAY,CACV,8BACA,8BACA,8BACA,gCAGJ,CACEJ,KAAM,4BACNC,KAAM,kBACNC,QAAS,8GACTC,SAAU,2HACVC,WAAY,CACV,8BACA,8BACA,8BACA,iCAmBSI,EAbF,kBACX,6BACE,kBAAC,EAAD,MACA,yBAAKrB,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAYoB,EAAS,IACtB,kBAAC,EAAYA,EAAS,QC5EZE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8bdb0f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass NavLink extends React.Component {\r\n    render() {\r\n      return (\r\n        <a className=\"nav-item\" href={`#${this.props.itemName}`}>\r\n          {this.props.itemName}\r\n        </a>\r\n      );\r\n    }\r\n  }\r\n  const Navigation = () => (\r\n    <nav className=\"navigation\">\r\n      <img className=\"avatar\" src=\"assets/images/user.png\" alt=\"avatar\" />\r\n      <NavLink itemName=\"Intro\" />\r\n      <NavLink itemName=\"프로젝트1\" />\r\n      <NavLink itemName=\"프로젝트2\" />\r\n    </nav>\r\n  );\r\n  const Intro = () => (\r\n    <div className=\"section\" id=\"Intro\">\r\n      <h1>김성우의 포트폴리오</h1>\r\n      <div>\r\n        <a href=\"mailto:swo1548@gmail.com\">swo1548@gmail.com</a>\r\n        <p>서울 강남구 논현동</p>\r\n      </div>\r\n      <div>\r\n        <h2>경력</h2>\r\n        <p>ddddddd</p>\r\n        <h2>자기소개</h2>\r\n        <p>hi my name is ksw</p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const Project = ({ name, time, summary, epilogue, resultsURL }) => (\r\n    <div className=\"section\" id={name}>\r\n      <h1>{name}</h1>\r\n      <p>{time}</p>\r\n      <div>\r\n        <h2>개요</h2>\r\n        <p>{summary}</p>\r\n        <h2>후기</h2>\r\n        <p>{epilogue}</p>\r\n        <h2>결과</h2>\r\n        <div>\r\n          {resultsURL.map(url => (\r\n            <img src={url} alt=\"project result\" />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  const projects = [\r\n    {\r\n      name: \"프로젝트1\",\r\n      time: \"2019.04~2019.05\",\r\n      summary: \"이 프로젝트는 영국에서부터 시작되어 .......\",\r\n      epilogue: \"이 프로젝트를 시작한 사람을 가만두지 않겠다.\",\r\n      resultsURL: [\r\n        \"http://placehold.it/200x200\",\r\n        \"http://placehold.it/200x200\",\r\n        \"http://placehold.it/200x200\",\r\n        \"http://placehold.it/200x200\"\r\n      ]\r\n    },\r\n    {\r\n      name: \"프로젝트2\",\r\n      time: \"2019.04~2019.05\",\r\n      summary: \"이 프로젝트는 영국에서부터 시작되어 .......\",\r\n      epilogue: \"이 프로젝트를 시작한 사람을 가만두지 않겠다.\",\r\n      resultsURL: [\r\n        \"http://placehold.it/200x200\",\r\n        \"http://placehold.it/200x200\",\r\n        \"http://placehold.it/200x200\",\r\n        \"http://placehold.it/200x200\"\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // const Project = () => <h1>프로젝트</h1>;\r\n  const Main = () => (\r\n    <div>\r\n      <Navigation />\r\n      <div className=\"main\">\r\n        <div className=\"column-start\">\r\n          <Intro />\r\n          <Project {...projects[0]} />\r\n          <Project {...projects[1]} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  export default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './stylesheets/index.css';\nimport './stylesheets/main.css';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}